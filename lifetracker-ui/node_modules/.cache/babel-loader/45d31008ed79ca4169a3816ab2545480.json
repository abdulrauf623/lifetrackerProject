{"ast":null,"code":"const bcrypt = require(\"bcrypt\");\n\nconst {\n  BadRequestError,\n  UnauthorizedError\n} = require(\"../utils/errors\");\n\nconst {\n  BCRYPT_WORK_FACTOR\n} = require(\"/Users/abdul.karim/vaccineHubLab/config\");\n\nconst db = require(\"/Users/abdul.karim/vaccineHubLab/db\");\n\nclass User {\n  static async register(credentials) {\n    // to register people into a database \n    const requiredFields = [\"email\", \"password\", \"firstName\", \"lastName\"];\n    requiredFields.forEach(field => {\n      if (!credentials.hasOwnProperty(field)) {\n        throw new BadRequestError(`Missing ${field} in request body`);\n      }\n    });\n    const existingUser = await User.fetchUserByEmail(credentials.email);\n\n    if (existingUser) {\n      throw new BadRequestError(`Email already exists: ${credentials.email} `);\n    }\n\n    const hashedPassword = await bcrypt.hash(credentials.password, BCRYPT_WORK_FACTOR);\n    const lowerCasedEmail = credentials.email.toLowerCase();\n    const result = await db.query(`\n        INSERT INTO users (\n            email, password, firstName, lastName\n        )\n        VALUES  ($1, $2, $3, $4)\n        RETURNING id, email, password, firstName, lastName;\n        \n        \n        \n        `, [lowerCasedEmail, hashedPassword, credentials.firstName, credentials.lastName]);\n    const user = result.rows[0];\n    return user;\n  }\n\n  static async login(credentials) {\n    // to let people log into the page \n    const requiredFields = [\"email\", \"password\"];\n    requiredFields.forEach(field => {\n      if (!credentials.hasOwnProperty(field)) {\n        throw new BadRequestError(`Missing ${field} in request body`);\n      }\n    });\n    const existingUser = await User.fetchUserByEmail(credentials.email);\n\n    if (existingUser) {\n      const isValid = await bcrypt.compare(credentials.password, existingUser.password);\n\n      if (isValid) {\n        return existingUser;\n      }\n    }\n\n    throw new UnauthorizedError(\"Invalid email/password combination\");\n  }\n\n  static async fetchUserByEmail(email) {\n    if (!email) {\n      throw new BadRequestError(\"No email provided\");\n    }\n\n    const query = `SELECT * FROM users WHERE email = $1`;\n    const result = await db.query(query, [email.toLowerCase()]);\n    const user = result.rows[0];\n    return user;\n  }\n\n}\n\nmodule.exports = User;","map":{"version":3,"names":["bcrypt","require","BadRequestError","UnauthorizedError","BCRYPT_WORK_FACTOR","db","User","register","credentials","requiredFields","forEach","field","hasOwnProperty","existingUser","fetchUserByEmail","email","hashedPassword","hash","password","lowerCasedEmail","toLowerCase","result","query","firstName","lastName","user","rows","login","isValid","compare","module","exports"],"sources":["/Users/abdul.karim/lifetrackerProject/lifetracker-api/models/users.js"],"sourcesContent":["const bcrypt = require(\"bcrypt\")\nconst { BadRequestError, UnauthorizedError} = require(\"../utils/errors\")\nconst {BCRYPT_WORK_FACTOR} = require(\"/Users/abdul.karim/vaccineHubLab/config\")\n\nconst db = require(\"/Users/abdul.karim/vaccineHubLab/db\")\n\n\n\nclass User {\n\n\n\n    static async register(credentials){\n\n\n\n        // to register people into a database \n\n\n        const requiredFields = [\"email\", \"password\", \"firstName\", \"lastName\"]\n\n\n        requiredFields.forEach(field => {\n\n\n\n            if (!credentials.hasOwnProperty(field)){\n\n                throw new BadRequestError(`Missing ${field} in request body`)\n            }\n        })\n\n\n        const existingUser = await User.fetchUserByEmail(credentials.email)\n\n        if (existingUser){\n\n            throw new BadRequestError(`Email already exists: ${credentials.email} `)\n        }\n\n\n        const hashedPassword = await bcrypt.hash(credentials.password, BCRYPT_WORK_FACTOR)\n\n\n        const lowerCasedEmail = credentials.email.toLowerCase()\n\n\n        const result = await db.query(`\n        INSERT INTO users (\n            email, password, firstName, lastName\n        )\n        VALUES  ($1, $2, $3, $4)\n        RETURNING id, email, password, firstName, lastName;\n        \n        \n        \n        `, [lowerCasedEmail, hashedPassword, credentials.firstName, credentials.lastName])\n\n\n        const user = result.rows[0]\n\n\n        return user\n\n\n\n\n\n    }\n\n\n    static async login(credentials){\n\n\n\n// to let people log into the page \n\n\nconst requiredFields = [\"email\", \"password\"]\n\n\nrequiredFields.forEach(field => {\n\n\n\n    if (!credentials.hasOwnProperty(field)){\n\n        throw new BadRequestError(`Missing ${field} in request body`)\n    }\n})\n\n\nconst existingUser = await User.fetchUserByEmail(credentials.email)\n\n\nif (existingUser){\n\n\n    const isValid = await bcrypt.compare(credentials.password, existingUser.password)\n\n\n    if (isValid){\n\n        return existingUser\n    }\n}\n\n\n\n\n\n\nthrow new UnauthorizedError(\"Invalid email/password combination\")\n\n\n\n\n\n\n\n\n    }\n\n\n    static async fetchUserByEmail(email){\n\n        if (!email){\n\n            throw new BadRequestError(\"No email provided\")\n        }\n\n\n        const query = `SELECT * FROM users WHERE email = $1`\n\n        const result = await db.query(query, [email.toLowerCase()])\n\n\n        const user = result.rows[0]\n\n\n        return user\n\n\n    }\n\n}\n\n\n\nmodule.exports = User"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;EAAEC,eAAF;EAAmBC;AAAnB,IAAwCF,OAAO,CAAC,iBAAD,CAArD;;AACA,MAAM;EAACG;AAAD,IAAuBH,OAAO,CAAC,yCAAD,CAApC;;AAEA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,qCAAD,CAAlB;;AAIA,MAAMK,IAAN,CAAW;EAIc,aAARC,QAAQ,CAACC,WAAD,EAAa;IAI9B;IAGA,MAAMC,cAAc,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,WAAtB,EAAmC,UAAnC,CAAvB;IAGAA,cAAc,CAACC,OAAf,CAAuBC,KAAK,IAAI;MAI5B,IAAI,CAACH,WAAW,CAACI,cAAZ,CAA2BD,KAA3B,CAAL,EAAuC;QAEnC,MAAM,IAAIT,eAAJ,CAAqB,WAAUS,KAAM,kBAArC,CAAN;MACH;IACJ,CARD;IAWA,MAAME,YAAY,GAAG,MAAMP,IAAI,CAACQ,gBAAL,CAAsBN,WAAW,CAACO,KAAlC,CAA3B;;IAEA,IAAIF,YAAJ,EAAiB;MAEb,MAAM,IAAIX,eAAJ,CAAqB,yBAAwBM,WAAW,CAACO,KAAM,GAA/D,CAAN;IACH;;IAGD,MAAMC,cAAc,GAAG,MAAMhB,MAAM,CAACiB,IAAP,CAAYT,WAAW,CAACU,QAAxB,EAAkCd,kBAAlC,CAA7B;IAGA,MAAMe,eAAe,GAAGX,WAAW,CAACO,KAAZ,CAAkBK,WAAlB,EAAxB;IAGA,MAAMC,MAAM,GAAG,MAAMhB,EAAE,CAACiB,KAAH,CAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAT6B,EASlB,CAACH,eAAD,EAAkBH,cAAlB,EAAkCR,WAAW,CAACe,SAA9C,EAAyDf,WAAW,CAACgB,QAArE,CATkB,CAArB;IAYA,MAAMC,IAAI,GAAGJ,MAAM,CAACK,IAAP,CAAY,CAAZ,CAAb;IAGA,OAAOD,IAAP;EAMH;;EAGiB,aAALE,KAAK,CAACnB,WAAD,EAAa;IAInC;IAGA,MAAMC,cAAc,GAAG,CAAC,OAAD,EAAU,UAAV,CAAvB;IAGAA,cAAc,CAACC,OAAf,CAAuBC,KAAK,IAAI;MAI5B,IAAI,CAACH,WAAW,CAACI,cAAZ,CAA2BD,KAA3B,CAAL,EAAuC;QAEnC,MAAM,IAAIT,eAAJ,CAAqB,WAAUS,KAAM,kBAArC,CAAN;MACH;IACJ,CARD;IAWA,MAAME,YAAY,GAAG,MAAMP,IAAI,CAACQ,gBAAL,CAAsBN,WAAW,CAACO,KAAlC,CAA3B;;IAGA,IAAIF,YAAJ,EAAiB;MAGb,MAAMe,OAAO,GAAG,MAAM5B,MAAM,CAAC6B,OAAP,CAAerB,WAAW,CAACU,QAA3B,EAAqCL,YAAY,CAACK,QAAlD,CAAtB;;MAGA,IAAIU,OAAJ,EAAY;QAER,OAAOf,YAAP;MACH;IACJ;;IAOD,MAAM,IAAIV,iBAAJ,CAAsB,oCAAtB,CAAN;EASK;;EAG4B,aAAhBW,gBAAgB,CAACC,KAAD,EAAO;IAEhC,IAAI,CAACA,KAAL,EAAW;MAEP,MAAM,IAAIb,eAAJ,CAAoB,mBAApB,CAAN;IACH;;IAGD,MAAMoB,KAAK,GAAI,sCAAf;IAEA,MAAMD,MAAM,GAAG,MAAMhB,EAAE,CAACiB,KAAH,CAASA,KAAT,EAAgB,CAACP,KAAK,CAACK,WAAN,EAAD,CAAhB,CAArB;IAGA,MAAMK,IAAI,GAAGJ,MAAM,CAACK,IAAP,CAAY,CAAZ,CAAb;IAGA,OAAOD,IAAP;EAGH;;AAvIM;;AA6IXK,MAAM,CAACC,OAAP,GAAiBzB,IAAjB"},"metadata":{},"sourceType":"script"}